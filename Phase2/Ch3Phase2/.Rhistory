deliveries <- c(1200, 1100, 1300, 1000)
required_fuel <- deliveries*percent_mix[['fuel']]
required_corn <- deliveries*percent_mix[['corn']]
resource_lifespans <- hash()
resource_lifespans[['corn']] <- 6
resource_lifespans[['fuel']] <- 4
lookup_lifespan <- function(resource_name){
return(resource_lifespans[[resource_name]])
}
#lookup_lifespan('corn')
vars <- data.frame(expand.grid(resources, purchase_dates, delivery_dates))
colnames(vars) <- c("resource", "purchase_date", "delivery_date")
vars$resource <- lapply(vars$resource, as.character)
head(vars)
#vars$resource <- unlist(vars$resource)
lapply(vars$resource, lookup_lifespan)
vars <- mutate(vars, lifespan=unlist(lapply(resource, lookup_lifespan)))
vars$resource <- unlist(vars$resource)
vars <- vars %>%
filter((delivery_date < purchase_date + lifespan)&(delivery_date>=purchase_date))
vars <- mutate(vars, idx=1:nrow(vars))
vars
build_rhs <- function(row) {
percent <- percent_mix[[row$resource]]
delivery_idx <- which(delivery_dates == row$delivery_date)
amount <- deliveries[delivery_idx]*percent
return(amount)
}
by(constr_idx, 1:nrow(constr_idx), function(row) build_rhs(row))
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <-matrix(unlist(constraints), ncol=n_vars)
constraints #Preview the constraints LHS
by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <-matrix(unlist(constraints), ncol=n_vars)
constraints #Preview the constraints LHS
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <-matrix(constraints), ncol=n_vars)
constraints #Preview the constraints LHS
constraints[5] #Preview the constraints LHS
typeof(constraints) #Preview the constraints LHS
unlist(constraints) #Preview the constraints LHS
length(unlist(constraints)) #Preview the constraints LHS
16*8#Preview the constraints LHS
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <-matrix(constraints), ncol=n_vars)
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- matrix(constraints), ncol=n_vars)
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- matrix(constraints, ncol=n_vars)
matrix(unlist(constraints), ncol=16)
#Preview the constraints LHS
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- matrix(constraints, ncol=n_vars)
#Preview the constraints LHS
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- matrix(constraints, ncol=n_vars)
constraints
#Preview the constraints LHS
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- matrix(unlist(constraints), ncol=n_vars)
constraints
#Preview the constraints LHS
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints
length(constraints)
length(constraints[1])
length(unlist(constraints[1]))
length(unlist(constraints))
type(constraints[1])
typeof(constraints[1])
typeof(constraints)
lapply(constraints, cbind)
lapply(constraints, rbind)
matrix(lapply(constraints, rbind))
matrix(unlist(lapply(constraints, rbind)))
matrix(unlist(lapply(constraints, rbind)), ncol=16)
matrix(unlist(lapply(constraints, cbind)), ncol=16)
matrix(unlist(lapply(constraints, rbind)), ncol=16)
lapply(constraints, rbind))
lapply(constraints, rbind)
lapply(unlist(constraints), rbind)
lapply(constraints, rbind)
sapply(constraints, rbind)
sapply(constraints, cbind)
t(sapply(constraints, cbind))
#Create LHS constraint vectors by iterating over dataframe rows
build_constraint <- function(row) {
idx_list <- lapply(str_split(row$n, ","), as.double)
v <- rep(0,n_vars)
for (i in idx_list) {
v[i] <- 1
}
return(v)
}
#Apply the function
constraints <- by(constr_idx, 1:nrow(constr_idx), function(row) build_constraint(row))
constraints <- t(sapply(constraints, cbind))
constraints
#Preview the constraints LHS
build_rhs <- function(row) {
percent <- percent_mix[[row$resource]]
delivery_idx <- which(delivery_dates == row$delivery_date)
amount <- deliveries[delivery_idx]*percent
return(amount)
}
sapply(by(constr_idx, 1:nrow(constr_idx), function(row) build_rhs(row)), cbind)
shiny::runApp('Documents/iia/Challenge2_Shiny_Demo_Original')
source('~/.active-rstudio-document', echo=TRUE)
install.packages('raster')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/FlightHealth')
runApp('Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/FlightHealth')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/FlightHealth")
png("image.png", width = 800, height = 600)
r <- matrix(rnorm(100,0,1),nrow=10, ncol=10)
plot(raster(r))
dev.off()
runApp()
dat <- read.csv('RUL_FD001_Out.csv')
head(dat)
dat <- read.csv('RUL_FD001_Out.csv')
getwd()
dat <- read.csv('RUL_FD001_Out.csv')
head(dat)
dat$Predicted
length(dat$Predicted)
runApp()
runApp()
head(dat)
?head(dat)
head(dat, n=20)
runApp()
runApp()
runApp()
runApp()
runApp()
dat <- read.csv('RUL_FD001_Out.csv')
head(dat, n=20)
length(dat$Predicted)
dat <- read.csv('RUL_FD001_Out.csv')
head(dat, n=20)
runApp()
mod(12, 10)
mod(12, 10)
12%%10
runApp()
x_click <- 115.636390114526
right <- 371
bottom <- 325
top <- 58.9
left <- 105
x_range <- right - left
y_range <- bottom - top
x_steps <- x_range / 10
y_steps <- y_range
y_steps
x_click-left %% x_step
x_click-left %% x_steps
(x_click - left) %% x_steps
round((x_click - left) %% x_steps)
(x_click - left) %% x_steps
x_steps
(x_click - left)
(x_click - left)
(x_click - left) %% x_steps
(x_click - left) / x_steps
floor((x_click - left) / x_steps)
ceiling((x_click - left) / x_steps)
runApp()
head(dat)
head(dat)
head(dat)
dat <- dat %>%
mutate(X = range(length(dat)))
library(dplyr)
library(dplyr)
dat <- dat %>%
mutate(X = range(length(dat)))
range(10)
range(100)
c(range(100))
1:100
dat <- dat %>%
mutate(X = 1:length(dat)))
dat <- dat %>%
mutate(X = 1:length(dat))
head(dat)
dat %>%
filter(X ==1)
runApp()
head(dat)
head(dat)
temp <- dat %>%
filter(X ==1)
head(temp)
runApp()
runApp()
temp <- dat %>%
filter(X ==1)$Predicted
temp <- dat %>%
filter(X ==1)$Predicted
temp <- dat %>%
filter(X ==1)
temp$Predicted
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
runApp()
runApp()
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
dat <- read.csv('RUL_FD001_Out.csv')
head(dat, n=20)
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
dat <- read.csv('RUL_FD001_Out.csv')
head(dat, n=20)
dat <- read.csv('RUL_FD001_Out.csv')
#head(dat, n=20)
dat %>%
mutate(futureHealth = Predicted - input$days)
dat <- read.csv('RUL_FD001_Out.csv')
#head(dat, n=20)
days <- 30
dat %>%
mutate(futureHealth = Predicted - days)
head(dat)
dat <- read.csv('RUL_FD001_Out.csv')
#head(dat, n=20)
days <- 30
dat <- dat %>%
mutate(futureHealth = Predicted - days)
head(dat)
nrow(dat)
nrow(dat %>%
filter(futureHealth >= buffer))
emp <- dat %>%
filter(futureHealth >= buffer)
temp <- dat %>%
filter(futureHealth >= rep(buffer,length(buffer)))
temp <- dat %>%
filter(futureHealth >= rep(buffer,length(dat)))
rep(buffer,length(dat)
temp <- dat %>%
rep(buffer,length(dat))
dat <- read.csv('RUL_FD001_Out.csv')
#head(dat, n=20)
days <- 30
buffer <- 10
dat <- dat %>%
mutate(futureHealth = Predicted - days)
head(dat)
rep(buffer,length(dat))
nrow(dat)
rep(buffer,nrow(dat))
temp <- dat %>%
filter(futureHealth >= buffer))
temp <- dat %>%
filter(futureHealth >= buffer)
head(temp)
nrow(temp)
nready <- nrow(dat %>%
filter(futureHealth >= buffer))
nready
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
ready <- dat %>%
filter(futureHealth >= buffer)
nready <- nrow(ready)
nready
ready <- dat %>%
filter(futureHealth >= buffer)
nready <- nrow(ready)
nready
head(ready)
ready$X
ready$X + 1
not_ready <- dat %>%
filter(futureHealth < buffer)
not_ready$X + 1
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
ggplot(data = dat, aes(x = futureHealth)) +
geom_histogram(aes(y = cumsum(futureHealth)), binwidth = 1, boundary = 0,
color = "black", fill = "white")
ggplot(data = dat, aes(x = futureHealth)) +
geom_histogram(aes(y = cumsum(futureHealth)), binwidth = 1, boundary = 0,
color = "black", fill = "white")
ggplot(data = dat, aes(x = futureHealth)) +
geom_histogram(aes(x = cumsum(futureHealth)), binwidth = 1, boundary = 0,
color = "black", fill = "white")
runApp('~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2')
head(ready)
head(ready)
ready %>%
sort(futureHealth)
arrange(ready, futureHealth)
arrange(ready, futureHealth)
arrange(ready, futureHealth)$futureHealth
hist(arrange(ready, futureHealth)$futureHealth)
?hist
hist(arrange(ready, futureHealth)$futureHealth, freq=False)
hist(arrange(ready, futureHealth)$futureHealth, freq=FALSE)
arrange(ready, futureHealth)$futureHealth
arrange(ready, futureHealth)
arrange(ready, futureHealth)$futureHealth
normalizeCounts(arrange(ready, futureHealth)$futureHealth)
library(misc)
arrange(ready, futureHealth)$futureHealth
getwd()
setwd("~/Documents/iia/DataChallenge3/Data-Challenge-3/Phase2/Ch3Phase2")
library(reticulate)
source_python('helper.py')
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
source_python('helper.py')
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
t(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth))
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
typeof(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth))
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1]
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1][1]
typeof(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1])
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1]
unlist(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1])
unlist(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1])[1]
unlist(calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1])[2]
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)[1]
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
source_python('helper.py')
calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
sum <- calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
ggplot(data = sum) +
geom_step(mapping = aes(Day_in_Future, PercentHealthy))
head(sum)
ggplot(data = sum) +
geom_step(mapping = aes(Days_in_Future, PercentHealthy))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = healthyOutlook()) +
geom_step(mapping = aes(Days_in_Future, PercentHealthy)) +
?ggtitle
ggplot(data = healthyOutlook()) +
geom_step(mapping = aes(Days_in_Future, PercentHealthy)) +
?ggtitle
?ggtitle
runApp()
install.packages('shinyWidget')
install.packages('shinyWidgets')
runApp()
runApp()
runApp()
arrange(ready, futureHealth)$futureHealth
arrange(ready, futureHealth)
arrange(ready, futureHealth) %>%
group_by(futureHealth) %>%
summarise(count)
utureHealth) %>%
arrange(ready, futureHealth) %>%
group_by(futureHealth) %>%
summarise(n())
arrange(ready, futureHealth) %>%
group_by(futureHealth) %>%
summarise(count = n())
arrange(ready, futureHealth) %>%
group_by(futureHealth) %>%
summarise(count = n()) %>%
mutate(countTotal = cumsum(count))
arrange(ready, futureHealth) %>%
group_by(futureHealth) %>%
summarise(count = n()) %>%
mutate(countTotal = cumsum(count),
percent = count/max(countTotal),
percentCumulative = countTotal/max(countTotal))
dat <- read.csv('RUL_FD001_Out.csv')
#head(dat, n=20)
days <- 30
buffer <- 10
dat <- dat %>%
mutate(futureHealth = Predicted - days)
head(dat)
rep(buffer,nrow(dat))
ready <- dat %>%
filter(futureHealth >= buffer)
not_ready <- dat %>%
filter(futureHealth < buffer)
not_ready$X + 1
nready <- nrow(ready)
nready
head(ready)
?hist
library(reticulate)
source_python('helper.py')
sum <- calc_cum_percentiles(arrange(ready, futureHealth)$futureHealth)
head(sum)
ggplot(data = sum) +
geom_step(mapping = aes(Days_in_Future, PercentHealthy))
